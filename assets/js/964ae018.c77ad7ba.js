"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[491],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(t),k=i,c=d["".concat(p,".").concat(k)]||d[k]||u[k]||r;return t?a.createElement(c,o(o({ref:n},m),{},{components:t})):a.createElement(c,o({ref:n},m))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=k;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},1082:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const r={id:"api-reference",title:"API Reference",sidebar_label:"API Reference"},o=void 0,l={unversionedId:"api-reference",id:"api-reference",title:"API Reference",description:"Assuming installation via NPM, you can load Terser in your application",source:"@site/docs/api-reference.md",sourceDirName:".",slug:"/api-reference",permalink:"/docs/api-reference",draft:!1,tags:[],version:"current",frontMatter:{id:"api-reference",title:"API Reference",sidebar_label:"API Reference"},sidebar:"tutorialSidebar",next:{title:"CLI Usage",permalink:"/docs/cli-usage"}},p={},s=[{value:"Minify options",id:"minify-options",level:2},{value:"Minify options structure",id:"minify-options-structure",level:2},{value:"Source map options",id:"source-map-options",level:3},{value:"Parse options",id:"parse-options",level:2},{value:"Compress options",id:"compress-options",level:2},{value:"Mangle options",id:"mangle-options",level:2},{value:"Mangle properties options",id:"mangle-properties-options",level:3},{value:"Format options",id:"format-options",level:2},{value:"Keeping copyright notices or other comments",id:"keeping-copyright-notices-or-other-comments",level:3},{value:"The <code>unsafe</code> <code>compress</code> option",id:"the-unsafe-compress-option",level:3},{value:"Conditional compilation",id:"conditional-compilation",level:3},{value:"Conditional compilation API",id:"conditional-compilation-api",level:3},{value:"Annotations",id:"annotations",level:3},{value:"ESTree / SpiderMonkey AST",id:"estree--spidermonkey-ast",level:3},{value:"Use Acorn for parsing",id:"use-acorn-for-parsing",level:3},{value:"Terser Fast Minify Mode",id:"terser-fast-minify-mode",level:3},{value:"Source maps and debugging",id:"source-maps-and-debugging",level:4},{value:"Compiler assumptions",id:"compiler-assumptions",level:3},{value:"Build Tools and Adaptors using Terser",id:"build-tools-and-adaptors-using-terser",level:3},{value:"Replacing <code>uglify-es</code> with <code>terser</code> in a project using <code>yarn</code>",id:"replacing-uglify-es-with-terser-in-a-project-using-yarn",level:3}],m={toc:s},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Assuming installation via NPM, you can load Terser in your application\nlike this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { minify } = require("terser");\n')),(0,i.kt)("p",null,"Or,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { minify } from "terser";\n')),(0,i.kt)("p",null,"Browser loading is also supported:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://cdn.jsdelivr.net/npm/source-map@0.7.3/dist/source-map.js"><\/script>\n<script src="https://cdn.jsdelivr.net/npm/terser/dist/bundle.min.js"><\/script>\n')),(0,i.kt)("p",null,"There is a single async high level function, ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"async minify(code, options)")),",\nwhich will perform all minification ",(0,i.kt)("a",{parentName:"p",href:"#minify-options"},"phases")," in a configurable\nmanner. By default ",(0,i.kt)("inlineCode",{parentName:"p"},"minify()")," will enable ",(0,i.kt)("a",{parentName:"p",href:"#compress-options"},(0,i.kt)("inlineCode",{parentName:"a"},"compress")),"\nand ",(0,i.kt)("a",{parentName:"p",href:"#mangle-options"},(0,i.kt)("inlineCode",{parentName:"a"},"mangle")),". Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var code = "function add(first, second) { return first + second; }";\nvar result = await minify(code, { sourceMap: true });\nconsole.log(result.code);  // minified output: function add(n,d){return n+d}\nconsole.log(result.map);  // source map\n')),(0,i.kt)("p",null,"You can ",(0,i.kt)("inlineCode",{parentName:"p"},"minify")," more than one JavaScript file at a time by using an object\nfor the first argument where the keys are file names and the values are source\ncode:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var code = {\n    "file1.js": "function add(first, second) { return first + second; }",\n    "file2.js": "console.log(add(1 + 2, 3 + 4));"\n};\nvar result = await minify(code);\nconsole.log(result.code);\n// function add(d,n){return d+n}console.log(add(3,7));\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"toplevel")," option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var code = {\n    "file1.js": "function add(first, second) { return first + second; }",\n    "file2.js": "console.log(add(1 + 2, 3 + 4));"\n};\nvar options = { toplevel: true };\nvar result = await minify(code, options);\nconsole.log(result.code);\n// console.log(3+7);\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"nameCache")," option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var options = {\n    mangle: {\n        toplevel: true,\n    },\n    nameCache: {}\n};\nvar result1 = await minify({\n    "file1.js": "function add(first, second) { return first + second; }"\n}, options);\nvar result2 = await minify({\n    "file2.js": "console.log(add(1 + 2, 3 + 4));"\n}, options);\nconsole.log(result1.code);\n// function n(n,r){return n+r}\nconsole.log(result2.code);\n// console.log(n(3,7));\n')),(0,i.kt)("p",null,"You may persist the name cache to the file system in the following way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var cacheFileName = "/tmp/cache.json";\nvar options = {\n    mangle: {\n        properties: true,\n    },\n    nameCache: JSON.parse(fs.readFileSync(cacheFileName, "utf8"))\n};\nfs.writeFileSync("part1.js", await minify({\n    "file1.js": fs.readFileSync("file1.js", "utf8"),\n    "file2.js": fs.readFileSync("file2.js", "utf8")\n}, options).code, "utf8");\nfs.writeFileSync("part2.js", await minify({\n    "file3.js": fs.readFileSync("file3.js", "utf8"),\n    "file4.js": fs.readFileSync("file4.js", "utf8")\n}, options).code, "utf8");\nfs.writeFileSync(cacheFileName, JSON.stringify(options.nameCache), "utf8");\n')),(0,i.kt)("p",null,"An example of a combination of ",(0,i.kt)("inlineCode",{parentName:"p"},"minify()")," options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var code = {\n    "file1.js": "function add(first, second) { return first + second; }",\n    "file2.js": "console.log(add(1 + 2, 3 + 4));"\n};\nvar options = {\n    toplevel: true,\n    compress: {\n        global_defs: {\n            "@console.log": "alert"\n        },\n        passes: 2\n    },\n    format: {\n        preamble: "/* minified */"\n    }\n};\nvar result = await minify(code, options);\nconsole.log(result.code);\n// /* minified */\n// alert(10);"\n')),(0,i.kt)("p",null,"An error example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'try {\n    const result = await minify({"foo.js" : "if (0) else console.log(1);"});\n    // Do something with result\n} catch (error) {\n    const { message, filename, line, col, pos } = error;\n    // Do something with error\n}\n')),(0,i.kt)("h2",{id:"minify-options"},"Minify options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ecma")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),") - pass ",(0,i.kt)("inlineCode",{parentName:"p"},"5"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"2015"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"2016"),", etc to override\n",(0,i.kt)("inlineCode",{parentName:"p"},"compress")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"format"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"ecma")," options.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"enclose")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") - pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", or a string in the format\nof ",(0,i.kt)("inlineCode",{parentName:"p"},'"args[:values]"'),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"values")," are comma-separated\nargument names and values, respectively, to embed the output in a big\nfunction with the configurable arguments and values.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"parse")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),") \u2014 pass an object if you wish to specify some\nadditional ",(0,i.kt)("a",{parentName:"p",href:"#parse-options"},"parse options"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"compress")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),") \u2014 pass ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," to skip compressing entirely.\nPass an object to specify custom ",(0,i.kt)("a",{parentName:"p",href:"#compress-options"},"compress options"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"mangle")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") \u2014 pass ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," to skip mangling names, or pass\nan object to specify ",(0,i.kt)("a",{parentName:"p",href:"#mangle-options"},"mangle options")," (see below)."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mangle.properties")," (default ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),") \u2014 a subcategory of the mangle option.\nPass an object to specify custom ",(0,i.kt)("a",{parentName:"li",href:"#mangle-properties-options"},"mangle property options"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"module")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),') \u2014 Use when minifying an ES6 module. "use strict"\nis implied and names can be mangled on the top scope. If ',(0,i.kt)("inlineCode",{parentName:"p"},"compress")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"mangle")," is enabled then the ",(0,i.kt)("inlineCode",{parentName:"p"},"toplevel")," option will be enabled.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"format")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),") \u2014 pass an object if you wish to specify\nadditional ",(0,i.kt)("a",{parentName:"p",href:"#format-options"},"format options"),".  The defaults are optimized\nfor best compression.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sourceMap")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") - pass an object if you wish to specify\n",(0,i.kt)("a",{parentName:"p",href:"#source-map-options"},"source map options"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"toplevel")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") - set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if you wish to enable top level\nvariable and function name mangling and to drop unused variables and functions.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"nameCache")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),") - pass an empty object ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," or a previously\nused ",(0,i.kt)("inlineCode",{parentName:"p"},"nameCache")," object if you wish to cache mangled variable and\nproperty names across multiple invocations of ",(0,i.kt)("inlineCode",{parentName:"p"},"minify()"),". Note: this is\na read/write property. ",(0,i.kt)("inlineCode",{parentName:"p"},"minify()")," will read the name cache state of this\nobject and update it during minification so that it may be\nreused or externally persisted by the user.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ie8")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") - set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to support IE8.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_classnames")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),") - pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to prevent discarding or mangling\nof class names. Pass a regular expression to only keep class names matching that regex.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_fnames")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") - pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to prevent discarding or mangling\nof function names. Pass a regular expression to only keep function names matching that regex.\nUseful for code relying on ",(0,i.kt)("inlineCode",{parentName:"p"},"Function.prototype.name"),". If the top level minify option\n",(0,i.kt)("inlineCode",{parentName:"p"},"keep_classnames")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," it will be overridden with the value of the top level\nminify option ",(0,i.kt)("inlineCode",{parentName:"p"},"keep_fnames"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"safari10")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") - pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to work around Safari 10/11 bugs in\nloop scoping and ",(0,i.kt)("inlineCode",{parentName:"p"},"await"),". See ",(0,i.kt)("inlineCode",{parentName:"p"},"safari10")," options in ",(0,i.kt)("a",{parentName:"p",href:"#mangle-options"},(0,i.kt)("inlineCode",{parentName:"a"},"mangle")),"\nand ",(0,i.kt)("a",{parentName:"p",href:"#format-options"},(0,i.kt)("inlineCode",{parentName:"a"},"format"))," for details."))),(0,i.kt)("h2",{id:"minify-options-structure"},"Minify options structure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n    parse: {\n        // parse options\n    },\n    compress: {\n        // compress options\n    },\n    mangle: {\n        // mangle options\n\n        properties: {\n            // mangle property options\n        }\n    },\n    format: {\n        // format options (can also use `output` for backwards compatibility)\n    },\n    sourceMap: {\n        // source map options\n    },\n    ecma: 5, // specify one of: 5, 2015, 2016, etc.\n    enclose: false, // or specify true, or "args:values"\n    keep_classnames: false,\n    keep_fnames: false,\n    ie8: false,\n    module: false,\n    nameCache: null, // or specify a name cache object\n    safari10: false,\n    toplevel: false\n}\n')),(0,i.kt)("h3",{id:"source-map-options"},"Source map options"),(0,i.kt)("p",null,"To generate a source map:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var result = await minify({"file1.js": "var a = function() {};"}, {\n    sourceMap: {\n        filename: "out.js",\n        url: "out.js.map"\n    }\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);  // source map\n')),(0,i.kt)("p",null,"Note that the source map is not saved in a file, it's just returned in\n",(0,i.kt)("inlineCode",{parentName:"p"},"result.map"),".  The value passed for ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceMap.url")," is only used to set\n",(0,i.kt)("inlineCode",{parentName:"p"},"//# sourceMappingURL=out.js.map")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"result.code"),". The value of\n",(0,i.kt)("inlineCode",{parentName:"p"},"filename")," is only used to set ",(0,i.kt)("inlineCode",{parentName:"p"},"file")," attribute (see ",(0,i.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k"},"the spec"),")\nin source map file."),(0,i.kt)("p",null,"You can set option ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceMap.url")," to be ",(0,i.kt)("inlineCode",{parentName:"p"},'"inline"')," and source map will\nbe appended to code."),(0,i.kt)("p",null,"You can also specify sourceRoot property to be included in source map:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var result = await minify({"file1.js": "var a = function() {};"}, {\n    sourceMap: {\n        root: "http://example.com/src",\n        url: "out.js.map"\n    }\n});\n')),(0,i.kt)("p",null,"If you're compressing compiled JavaScript and have a source map for it, you\ncan use ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceMap.content"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var result = await minify({"compiled.js": "compiled code"}, {\n    sourceMap: {\n        content: "content from compiled.js.map",\n        url: "minified.js.map"\n    }\n});\n// same as before, it returns `code` and `map`\n')),(0,i.kt)("p",null,"If you're using the ",(0,i.kt)("inlineCode",{parentName:"p"},"X-SourceMap")," header instead, you can just omit ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceMap.url"),"."),(0,i.kt)("p",null,"If you happen to need the source map as a raw object, set ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceMap.asObject")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h2",{id:"parse-options"},"Parse options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"bare_returns")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- support top level ",(0,i.kt)("inlineCode",{parentName:"p"},"return")," statements")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"html5_comments")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"shebang")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- support ",(0,i.kt)("inlineCode",{parentName:"p"},"#!command")," as the first line")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"spidermonkey")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- accept a Spidermonkey (Mozilla) AST"))),(0,i.kt)("h2",{id:"compress-options"},"Compress options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"defaults")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," to disable most default\nenabled ",(0,i.kt)("inlineCode",{parentName:"p"},"compress")," transforms. Useful when you only want to enable a few\n",(0,i.kt)("inlineCode",{parentName:"p"},"compress")," options while disabling the rest.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"arrows")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- Class and object literal methods are converted\nwill also be converted to arrow expressions if the resultant code is shorter:\n",(0,i.kt)("inlineCode",{parentName:"p"},"m(){return x}")," becomes ",(0,i.kt)("inlineCode",{parentName:"p"},"m:()=>x"),". To do this to regular ES5 functions which\ndon't use ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"arguments"),", see ",(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_arrows"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"arguments")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- replace ",(0,i.kt)("inlineCode",{parentName:"p"},"arguments[index]")," with function\nparameter name whenever possible.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"booleans")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- various optimizations for boolean context,\nfor example ",(0,i.kt)("inlineCode",{parentName:"p"},"!!a ? b : c \u2192 a ? b : c"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"booleans_as_integers")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Turn booleans into 0 and 1, also\nmakes comparisons with booleans use ",(0,i.kt)("inlineCode",{parentName:"p"},"==")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"!=")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"===")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"!=="),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"collapse_vars")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- Collapse single-use non-constant variables,\nside effects permitting.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"comparisons")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- apply certain optimizations to binary nodes,\ne.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"!(a <= b) \u2192 a > b")," (only when ",(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_comps"),"), attempts to negate binary\nnodes, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"a = !b && !c && !d && !e \u2192 a=!(b||c||d||e)")," etc. Note: ",(0,i.kt)("inlineCode",{parentName:"p"},"comparisons"),"\nworks best with ",(0,i.kt)("inlineCode",{parentName:"p"},"lhs_constants")," enabled.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"computed_props")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- Transforms constant computed properties\ninto regular ones: ",(0,i.kt)("inlineCode",{parentName:"p"},'{["computed"]: 1}')," is converted to ",(0,i.kt)("inlineCode",{parentName:"p"},"{computed: 1}"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"conditionals")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- apply optimizations for ",(0,i.kt)("inlineCode",{parentName:"p"},"if"),"-s and conditional\nexpressions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"dead_code")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- remove unreachable code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"directives")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- remove redundant or non-standard directives")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"drop_console")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to discard calls to\n",(0,i.kt)("inlineCode",{parentName:"p"},"console.*")," functions. If you wish to drop a specific function call\nsuch as ",(0,i.kt)("inlineCode",{parentName:"p"},"console.info")," and/or retain side effects from function arguments\nafter dropping the function call then use ",(0,i.kt)("inlineCode",{parentName:"p"},"pure_funcs")," instead.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"drop_debugger")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- remove ",(0,i.kt)("inlineCode",{parentName:"p"},"debugger;")," statements")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ecma")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"5"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"2015")," or greater to enable ",(0,i.kt)("inlineCode",{parentName:"p"},"compress")," options that\nwill transform ES5 code into smaller ES6+ equivalent forms.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"evaluate")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- attempt to evaluate constant expressions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"expression")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to preserve completion values\nfrom terminal statements without ",(0,i.kt)("inlineCode",{parentName:"p"},"return"),", e.g. in bookmarklets.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"global_defs")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),") -- see ",(0,i.kt)("a",{parentName:"p",href:"#conditional-compilation"},"conditional compilation"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"hoist_funs")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- hoist function declarations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"hoist_props")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- hoist properties from constant object and\narray literals into regular variables subject to a set of constraints. For example:\n",(0,i.kt)("inlineCode",{parentName:"p"},"var o={p:1, q:2}; f(o.p, o.q);")," is converted to ",(0,i.kt)("inlineCode",{parentName:"p"},"f(1, 2);"),". Note: ",(0,i.kt)("inlineCode",{parentName:"p"},"hoist_props"),"\nworks best with ",(0,i.kt)("inlineCode",{parentName:"p"},"mangle")," enabled, the ",(0,i.kt)("inlineCode",{parentName:"p"},"compress")," option ",(0,i.kt)("inlineCode",{parentName:"p"},"passes")," set to ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," or higher,\nand the ",(0,i.kt)("inlineCode",{parentName:"p"},"compress")," option ",(0,i.kt)("inlineCode",{parentName:"p"},"toplevel")," enabled.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"hoist_vars")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- hoist ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," declarations (this is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"\nby default because it seems to increase the size of the output in general)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"if_return")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- optimizations for if/return and if/continue")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"inline")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- inline calls to function with simple/",(0,i.kt)("inlineCode",{parentName:"p"},"return")," statement:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"false")," -- same as ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," -- disabled inlining"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1")," -- inline simple functions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"2")," -- inline functions with arguments"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"3")," -- inline functions with arguments and variables"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"true")," -- same as ",(0,i.kt)("inlineCode",{parentName:"li"},"3")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"join_vars")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- join consecutive ",(0,i.kt)("inlineCode",{parentName:"p"},"var"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," statements")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_classnames")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to prevent the compressor from\ndiscarding class names. Pass a regular expression to only keep class names matching\nthat regex. See also: the ",(0,i.kt)("inlineCode",{parentName:"p"},"keep_classnames")," ",(0,i.kt)("a",{parentName:"p",href:"#mangle-options"},"mangle option"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_fargs")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- Prevents the compressor from discarding unused\nfunction arguments.  You need this for code which relies on ",(0,i.kt)("inlineCode",{parentName:"p"},"Function.length"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_fnames")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to prevent the\ncompressor from discarding function names. Pass a regular expression to only keep\nfunction names matching that regex. Useful for code relying on ",(0,i.kt)("inlineCode",{parentName:"p"},"Function.prototype.name"),".\nSee also: the ",(0,i.kt)("inlineCode",{parentName:"p"},"keep_fnames")," ",(0,i.kt)("a",{parentName:"p",href:"#mangle-options"},"mangle option"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_infinity")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to prevent ",(0,i.kt)("inlineCode",{parentName:"p"},"Infinity")," from\nbeing compressed into ",(0,i.kt)("inlineCode",{parentName:"p"},"1/0"),", which may cause performance issues on Chrome.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"lhs_constants")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- Moves constant values to the left-hand side\nof binary nodes. ",(0,i.kt)("inlineCode",{parentName:"p"},"foo == 42 \u2192 42 == foo"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"loops")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- optimizations for ",(0,i.kt)("inlineCode",{parentName:"p"},"do"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"while")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," loops\nwhen we can statically determine the condition.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"module")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," when compressing an ES6 module. Strict\nmode is implied and the ",(0,i.kt)("inlineCode",{parentName:"p"},"toplevel")," option as well.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"negate_iife")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),') -- negate "Immediately-Called Function Expressions"\nwhere the return value is discarded, to avoid the parens that the\ncode generator would insert.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"passes")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),") -- The maximum number of times to run compress.\nIn some cases more than one pass leads to further compressed code.  Keep in\nmind more passes will take more time.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"properties")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- rewrite property access using the dot notation, for\nexample ",(0,i.kt)("inlineCode",{parentName:"p"},'foo["bar"] \u2192 foo.bar'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"pure_funcs")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),") -- You can pass an array of names and\nTerser will assume that those functions do not produce side\neffects.  DANGER: will not check if the name is redefined in scope.\nAn example case here, for instance ",(0,i.kt)("inlineCode",{parentName:"p"},"var q = Math.floor(a/b)"),".  If\nvariable ",(0,i.kt)("inlineCode",{parentName:"p"},"q")," is not used elsewhere, Terser will drop it, but will\nstill keep the ",(0,i.kt)("inlineCode",{parentName:"p"},"Math.floor(a/b)"),", not knowing what it does.  You can\npass ",(0,i.kt)("inlineCode",{parentName:"p"},"pure_funcs: [ 'Math.floor' ]")," to let it know that this\nfunction won't produce any side effect, in which case the whole\nstatement would get discarded.  The current implementation adds some\noverhead (compression will be slower).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"pure_getters")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},'"strict"'),") -- If you pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," for\nthis, Terser will assume that object property access\n(e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"foo.bar")," or ",(0,i.kt)("inlineCode",{parentName:"p"},'foo["bar"]'),") doesn't have any side effects.\nSpecify ",(0,i.kt)("inlineCode",{parentName:"p"},'"strict"')," to treat ",(0,i.kt)("inlineCode",{parentName:"p"},"foo.bar")," as side-effect-free only when\n",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," is certain to not throw, i.e. not ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"reduce_vars")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- Improve optimization on variables assigned with and\nused as constant values.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"reduce_funcs")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- Inline single-use functions when\npossible. Depends on ",(0,i.kt)("inlineCode",{parentName:"p"},"reduce_vars")," being enabled.  Disabling this option\nsometimes improves performance of the output code.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sequences")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- join consecutive simple statements using the\ncomma operator.  May be set to a positive integer to specify the maximum number\nof consecutive comma sequences that will be generated. If this option is set to\n",(0,i.kt)("inlineCode",{parentName:"p"},"true")," then the default ",(0,i.kt)("inlineCode",{parentName:"p"},"sequences")," limit is ",(0,i.kt)("inlineCode",{parentName:"p"},"200"),". Set option to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"\nto disable. The smallest ",(0,i.kt)("inlineCode",{parentName:"p"},"sequences")," length is ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),". A ",(0,i.kt)("inlineCode",{parentName:"p"},"sequences")," value of ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),"\nis grandfathered to be equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," and as such means ",(0,i.kt)("inlineCode",{parentName:"p"},"200"),". On rare\noccasions the default sequences limit leads to very slow compress times in which\ncase a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"20")," or less is recommended.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"side_effects")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- Remove expressions which have no side effects\nand whose results aren't used.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"switches")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- de-duplicate and remove unreachable ",(0,i.kt)("inlineCode",{parentName:"p"},"switch")," branches")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"toplevel")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- drop unreferenced functions (",(0,i.kt)("inlineCode",{parentName:"p"},'"funcs"'),") and/or\nvariables (",(0,i.kt)("inlineCode",{parentName:"p"},'"vars"'),") in the top level scope (",(0,i.kt)("inlineCode",{parentName:"p"},"false")," by default, ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to drop\nboth unreferenced functions and variables)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"top_retain")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),") -- prevent specific toplevel functions and\nvariables from ",(0,i.kt)("inlineCode",{parentName:"p"},"unused")," removal (can be array, comma-separated, RegExp or\nfunction. Implies ",(0,i.kt)("inlineCode",{parentName:"p"},"toplevel"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"typeofs")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- Transforms ",(0,i.kt)("inlineCode",{parentName:"p"},'typeof foo == "undefined"')," into\n",(0,i.kt)("inlineCode",{parentName:"p"},"foo === void 0"),".  Note: recommend to set this value to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," for IE10 and\nearlier versions due to known issues.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unsafe")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),') -- apply "unsafe" transformations\n(',(0,i.kt)("a",{parentName:"p",href:"#the-unsafe-compress-option"},"details"),").")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_arrows")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Convert ES5 style anonymous function\nexpressions to arrow functions if the function body does not reference ",(0,i.kt)("inlineCode",{parentName:"p"},"this"),".\nNote: it is not always safe to perform this conversion if code relies on the\nthe function having a ",(0,i.kt)("inlineCode",{parentName:"p"},"prototype"),", which arrow functions lack.\nThis transform requires that the ",(0,i.kt)("inlineCode",{parentName:"p"},"ecma")," compress option is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"2015")," or greater.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_comps")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Reverse ",(0,i.kt)("inlineCode",{parentName:"p"},"<")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"<=")," to ",(0,i.kt)("inlineCode",{parentName:"p"},">")," and ",(0,i.kt)("inlineCode",{parentName:"p"},">=")," to\nallow improved compression. This might be unsafe when an at least one of two\noperands is an object with computed values due the use of methods like ",(0,i.kt)("inlineCode",{parentName:"p"},"get"),",\nor ",(0,i.kt)("inlineCode",{parentName:"p"},"valueOf"),". This could cause change in execution order after operands in the\ncomparison are switching. Compression only works if both ",(0,i.kt)("inlineCode",{parentName:"p"},"comparisons")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_comps")," are both set to true.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_Function")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- compress and mangle ",(0,i.kt)("inlineCode",{parentName:"p"},"Function(args, code)"),"\nwhen both ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," are string literals.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_math")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- optimize numerical expressions like\n",(0,i.kt)("inlineCode",{parentName:"p"},"2 * x * 3")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"6 * x"),", which may give imprecise floating point results.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_symbols")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- removes keys from native Symbol\ndeclarations, e.g ",(0,i.kt)("inlineCode",{parentName:"p"},'Symbol("kDog")')," becomes ",(0,i.kt)("inlineCode",{parentName:"p"},"Symbol()"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_methods")," (default: false) -- Converts ",(0,i.kt)("inlineCode",{parentName:"p"},"{ m: function(){} }")," to\n",(0,i.kt)("inlineCode",{parentName:"p"},"{ m(){} }"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"ecma")," must be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"6")," or greater to enable this transform.\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_methods"),' is a RegExp then key/value pairs with keys matching the\nRegExp will be converted to concise methods.\nNote: if enabled there is a risk of getting a "',(0,i.kt)("inlineCode",{parentName:"p"},"<method name>"),' is not a\nconstructor" TypeError should any code try to ',(0,i.kt)("inlineCode",{parentName:"p"},"new")," the former function.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_proto")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- optimize expressions like\n",(0,i.kt)("inlineCode",{parentName:"p"},"Array.prototype.slice.call(a)")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"[].slice.call(a)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_regexp")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- enable substitutions of variables with\n",(0,i.kt)("inlineCode",{parentName:"p"},"RegExp")," values the same way as if they are constants.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unsafe_undefined")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- substitute ",(0,i.kt)("inlineCode",{parentName:"p"},"void 0")," if there is a\nvariable named ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," in scope (variable name will be mangled, typically\nreduced to a single character)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unused")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- drop unreferenced functions and variables (simple\ndirect variable assignments do not count as references unless set to ",(0,i.kt)("inlineCode",{parentName:"p"},'"keep_assign"'),")"))),(0,i.kt)("h2",{id:"mangle-options"},"Mangle options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"eval")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to mangle names visible in scopes\nwhere ",(0,i.kt)("inlineCode",{parentName:"p"},"eval")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," are used.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_classnames")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to not mangle class names.\nPass a regular expression to only keep class names matching that regex.\nSee also: the ",(0,i.kt)("inlineCode",{parentName:"p"},"keep_classnames")," ",(0,i.kt)("a",{parentName:"p",href:"#compress-options"},"compress option"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_fnames")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to not mangle function names.\nPass a regular expression to only keep function names matching that regex.\nUseful for code relying on ",(0,i.kt)("inlineCode",{parentName:"p"},"Function.prototype.name"),". See also: the ",(0,i.kt)("inlineCode",{parentName:"p"},"keep_fnames"),"\n",(0,i.kt)("a",{parentName:"p",href:"#compress-options"},"compress option"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"module")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," an ES6 modules, where the toplevel\nscope is not the global scope. Implies ",(0,i.kt)("inlineCode",{parentName:"p"},"toplevel"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"nth_identifier")," (default: an internal mangler that weights based on character\nfrequency analysis) -- Pass an object with a ",(0,i.kt)("inlineCode",{parentName:"p"},"get(n)")," function that converts an\nordinal into the nth most favored (usually shortest) identifier.\nOptionally also provide ",(0,i.kt)("inlineCode",{parentName:"p"},"reset()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sort()"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"consider(chars, delta)")," to\nuse character frequency analysis of the source code.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"reserved")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),") -- Pass an array of identifiers that should be\nexcluded from mangling. Example: ",(0,i.kt)("inlineCode",{parentName:"p"},'["foo", "bar"]'),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"toplevel")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to mangle names declared in the\ntop level scope.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"safari10")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to work around the Safari 10 loop\niterator ",(0,i.kt)("a",{parentName:"p",href:"https://bugs.webkit.org/show_bug.cgi?id=171041"},"bug"),'\n"Cannot declare a let variable twice".\nSee also: the ',(0,i.kt)("inlineCode",{parentName:"p"},"safari10")," ",(0,i.kt)("a",{parentName:"p",href:"#format-options"},"format option"),"."))),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// test.js\nvar globalVar;\nfunction funcName(firstLongName, anotherLongName) {\n    var myVariable = firstLongName +  anotherLongName;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var code = fs.readFileSync(\"test.js\", \"utf8\");\n\nawait minify(code).code;\n// 'function funcName(a,n){}var globalVar;'\n\nawait minify(code, { mangle: { reserved: ['firstLongName'] } }).code;\n// 'function funcName(firstLongName,a){}var globalVar;'\n\nawait minify(code, { mangle: { toplevel: true } }).code;\n// 'function n(n,a){}var a;'\n")),(0,i.kt)("h3",{id:"mangle-properties-options"},"Mangle properties options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"builtins")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2014 Use ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to allow the mangling of builtin\nDOM properties. Not recommended to override this setting.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"debug")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2014 Mangle names with the original name still present.\nPass an empty string ",(0,i.kt)("inlineCode",{parentName:"p"},'""')," to enable, or a non-empty string to set the debug suffix.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_quoted")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2014 How quoting properties (",(0,i.kt)("inlineCode",{parentName:"p"},'{"prop": ...}')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'obj["prop"]'),") controls what gets mangled."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"strict"')," (recommended) -- ",(0,i.kt)("inlineCode",{parentName:"li"},"obj.prop")," is mangled."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"false")," -- ",(0,i.kt)("inlineCode",{parentName:"li"},'obj["prop"]')," is mangled."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"true")," -- ",(0,i.kt)("inlineCode",{parentName:"li"},"obj.prop")," is mangled unless there is ",(0,i.kt)("inlineCode",{parentName:"li"},'obj["prop"]')," elsewhere in the code."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"nth_identifer")," (default: an internal mangler that weights based on character\nfrequency analysis) -- Pass an object with a ",(0,i.kt)("inlineCode",{parentName:"p"},"get(n)")," function that converts an\nordinal into the nth most favored (usually shortest) identifier.\nOptionally also provide ",(0,i.kt)("inlineCode",{parentName:"p"},"reset()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sort()"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"consider(chars, delta)")," to\nuse character frequency analysis of the source code.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"regex")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),") \u2014 Pass a ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"},"RegExp literal or pattern string")," to only mangle property matching the regular expression.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"reserved")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),") \u2014 Do not mangle property names listed in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"reserved")," array.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"undeclared")," (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") - Mangle those names when they are accessed\nas properties of known top level variables but their declarations are never\nfound in input code. May be useful when only minifying parts of a project.\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/terser/terser/issues/397"},"#397")," for more details."))),(0,i.kt)("h2",{id:"format-options"},"Format options"),(0,i.kt)("p",null,'These options control the format of Terser\'s output code. Previously known\nas "output options".'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ascii_only")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- escape Unicode characters in strings and\nregexps (affects directives with non-ascii characters becoming invalid)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"beautify")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- (DEPRECATED) whether to beautify the output.\nWhen using the legacy ",(0,i.kt)("inlineCode",{parentName:"p"},"-b")," CLI flag, this is set to true by default.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"braces")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- always insert braces in ",(0,i.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"for"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"do"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"while")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," statements, even if their body is a single\nstatement.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"comments")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},'"some"'),') -- by default it keeps JSDoc-style comments\nthat contain "@license", "@copyright", "@preserve" or start with ',(0,i.kt)("inlineCode",{parentName:"p"},"!"),", pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"\nor ",(0,i.kt)("inlineCode",{parentName:"p"},'"all"')," to preserve all comments, ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," to omit comments in the output,\na regular expression string (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"/^!/"),") or a function.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ecma")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"5"),") -- set desired EcmaScript standard version for output.\nSet ",(0,i.kt)("inlineCode",{parentName:"p"},"ecma")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"2015")," or greater to emit shorthand object properties - i.e.:\n",(0,i.kt)("inlineCode",{parentName:"p"},"{a}")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"{a: a}"),".  The ",(0,i.kt)("inlineCode",{parentName:"p"},"ecma")," option will only change the output in\ndirect control of the beautifier. Non-compatible features in your input will\nstill be output as is. For example: an ",(0,i.kt)("inlineCode",{parentName:"p"},"ecma")," setting of ",(0,i.kt)("inlineCode",{parentName:"p"},"5")," will ",(0,i.kt)("strong",{parentName:"p"},"not"),"\nconvert modern code to ES5.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"indent_level")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"4"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"indent_start")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),") -- prefix all lines by that many spaces")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"inline_script")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- escape HTML comments and the slash in\noccurrences of ",(0,i.kt)("inlineCode",{parentName:"p"},"<\/script>")," in strings")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_numbers")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- keep number literals as it was in original code\n(disables optimizations like converting ",(0,i.kt)("inlineCode",{parentName:"p"},"1000000")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"1e6"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"keep_quoted_props")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- when turned on, prevents stripping\nquotes from property names in object literals.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"max_line_len")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- maximum line length (for minified code)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"preamble")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),") -- when passed it must be a string and\nit will be prepended to the output literally.  The source map will\nadjust for this text.  Can be used to insert a comment containing\nlicensing information, for example.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"quote_keys")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to quote all keys in literal\nobjects")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"quote_style")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),") -- preferred quote style for strings (affects\nquoted property names and directives as well):"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," -- prefers double quotes, switches to single quotes when there are\nmore double quotes in the string itself. ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," is best for gzip size."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1")," -- always use single quotes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"2")," -- always use double quotes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"3")," -- always use the original quotes"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"preserve_annotations")," -- (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- Preserve ",(0,i.kt)("a",{parentName:"p",href:"#annotations"},"Terser annotations")," in the output.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"safari10")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- set this option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to work around\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://bugs.webkit.org/show_bug.cgi?id=176685"},"Safari 10/11 await bug"),".\nSee also: the ",(0,i.kt)("inlineCode",{parentName:"p"},"safari10")," ",(0,i.kt)("a",{parentName:"p",href:"#mangle-options"},"mangle option"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"semicolons")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- separate statements with semicolons.  If\nyou pass ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," then whenever possible we will use a newline instead of a\nsemicolon, leading to more readable output of minified code (size before\ngzip could be smaller; size after gzip insignificantly larger).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"shebang")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- preserve shebang ",(0,i.kt)("inlineCode",{parentName:"p"},"#!")," in preamble (bash scripts)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"spidermonkey")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- produce a Spidermonkey (Mozilla) AST")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"webkit")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- enable workarounds for WebKit bugs.\nPhantomJS users should set this option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"wrap_iife")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") -- pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to wrap immediately invoked\nfunction expressions. See\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mishoo/UglifyJS2/issues/640"},"#640")," for more details.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"wrap_func_args")," (default ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") -- pass ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if you do not want to wrap\nfunction expressions that are passed as arguments, in parenthesis. See\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nolanlawson/optimize-js"},"OptimizeJS")," for more details."))),(0,i.kt)("h1",{id:"miscellaneous"},"Miscellaneous"),(0,i.kt)("h3",{id:"keeping-copyright-notices-or-other-comments"},"Keeping copyright notices or other comments"),(0,i.kt)("p",null,"You can pass ",(0,i.kt)("inlineCode",{parentName:"p"},"--comments"),' to retain certain comments in the output.  By\ndefault it will keep comments starting with "!" and JSDoc-style comments that\ncontain "@preserve", "@copyright", "@license" or "@cc_on" (conditional compilation for IE).\nYou can pass ',(0,i.kt)("inlineCode",{parentName:"p"},"--comments all")," to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example ",(0,i.kt)("inlineCode",{parentName:"p"},"--comments /^!/"),"\nwill keep comments like ",(0,i.kt)("inlineCode",{parentName:"p"},"/*! Copyright Notice */"),"."),(0,i.kt)("p",null,"Note, however, that there might be situations where comments are lost.  For\nexample:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function f() {\n    /** @preserve Foo Bar */\n    function g() {\n        // this function is never called\n    }\n    return something();\n}\n")),(0,i.kt)("p",null,'Even though it has "@preserve", the comment will be lost because the inner\nfunction ',(0,i.kt)("inlineCode",{parentName:"p"},"g")," (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced."),(0,i.kt)("p",null,"The safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes."),(0,i.kt)("h3",{id:"the-unsafe-compress-option"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"unsafe")," ",(0,i.kt)("inlineCode",{parentName:"h3"},"compress")," option"),(0,i.kt)("p",null,"It enables some transformations that ",(0,i.kt)("em",{parentName:"p"},"might")," break code logic in certain\ncontrived cases, but should be fine for most code.  It assumes that standard\nbuilt-in ECMAScript functions and classes have not been altered or replaced.\nYou might want to try it on your own code; it should reduce the minified size.\nSome examples of the optimizations made when this option is enabled:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"new Array(1, 2, 3)")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Array(1, 2, 3)")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"[ 1, 2, 3 ]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Array.from([1, 2, 3])")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"[1, 2, 3]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"new Object()")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"{}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"String(exp)")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"exp.toString()")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},'"" + exp')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"new Object/RegExp/Function/Error/Array (...)")," \u2192 we discard the ",(0,i.kt)("inlineCode",{parentName:"li"},"new")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"foo bar".substr(4)')," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},'"bar"'))),(0,i.kt)("h3",{id:"conditional-compilation"},"Conditional compilation"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"--define")," (",(0,i.kt)("inlineCode",{parentName:"p"},"-d"),") switch in order to declare global\nvariables that Terser will assume to be constants (unless defined in\nscope).  For example if you pass ",(0,i.kt)("inlineCode",{parentName:"p"},"--define DEBUG=false")," then, coupled with\ndead code removal Terser will discard the following from the output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'if (DEBUG) {\n    console.log("debug stuff");\n}\n')),(0,i.kt)("p",null,"You can specify nested constants in the form of ",(0,i.kt)("inlineCode",{parentName:"p"},"--define env.DEBUG=false"),"."),(0,i.kt)("p",null,"Another way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n",(0,i.kt)("inlineCode",{parentName:"p"},"build/defines.js")," file with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var DEBUG = false;\nvar PRODUCTION = true;\n// etc.\n")),(0,i.kt)("p",null,"and build your code like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"terser build/defines.js js/foo.js js/bar.js... -c\n")),(0,i.kt)("p",null,"Terser will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The build will contain the ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," declarations if you use\nthem. If you are targeting < ES6 environments which does not support ",(0,i.kt)("inlineCode",{parentName:"p"},"const"),",\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"reduce_vars")," (enabled by default) should suffice."),(0,i.kt)("h3",{id:"conditional-compilation-api"},"Conditional compilation API"),(0,i.kt)("p",null,"You can also use conditional compilation via the programmatic API. With the difference that the\nproperty name is ",(0,i.kt)("inlineCode",{parentName:"p"},"global_defs")," and is a compressor property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var result = await minify(fs.readFileSync("input.js", "utf8"), {\n    compress: {\n        dead_code: true,\n        global_defs: {\n            DEBUG: false\n        }\n    }\n});\n')),(0,i.kt)("p",null,"To replace an identifier with an arbitrary non-constant expression it is\nnecessary to prefix the ",(0,i.kt)("inlineCode",{parentName:"p"},"global_defs")," key with ",(0,i.kt)("inlineCode",{parentName:"p"},'"@"')," to instruct Terser\nto parse the value as an expression:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'await minify("alert(\'hello\');", {\n    compress: {\n        global_defs: {\n            "@alert": "console.log"\n        }\n    }\n}).code;\n// returns: \'console.log("hello");\'\n')),(0,i.kt)("p",null,"Otherwise it would be replaced as string literal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'await minify("alert(\'hello\');", {\n    compress: {\n        global_defs: {\n            "alert": "console.log"\n        }\n    }\n}).code;\n// returns: \'"console.log"("hello");\'\n')),(0,i.kt)("h3",{id:"annotations"},"Annotations"),(0,i.kt)("p",null,"Annotations in Terser are a way to tell it to treat a certain function call differently. The following annotations are available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/*@__INLINE__*/")," - forces a function to be inlined somewhere."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/*@__NOINLINE__*/")," - Makes sure the called function is not inlined into the call site."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/*@__PURE__*/")," - Marks a function call as pure. That means, it can safely be dropped."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/*@__KEY__*/")," - Marks a string literal as a property to also mangle it when mangling properties."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/*@__MANGLE_PROP__*/")," - Opts-in an object property (or class field) for mangling, when the property mangler is enabled.")),(0,i.kt)("p",null,"You can use either a ",(0,i.kt)("inlineCode",{parentName:"p"},"@")," sign at the start, or a ",(0,i.kt)("inlineCode",{parentName:"p"},"#"),"."),(0,i.kt)("p",null,"Here are some examples on how to use them:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'/*@__INLINE__*/\nfunction_always_inlined_here()\n\n/*#__NOINLINE__*/\nfunction_cant_be_inlined_into_here()\n\nconst x = /*#__PURE__*/i_am_dropped_if_x_is_not_used()\n\nfunction lookup(object, key) { return object[key]; }\nlookup({ i_will_be_mangled_too: "bar" }, /*@__KEY__*/ "i_will_be_mangled_too");\n')),(0,i.kt)("h3",{id:"estree--spidermonkey-ast"},"ESTree / SpiderMonkey AST"),(0,i.kt)("p",null,"Terser has its own abstract syntax tree format; for\n",(0,i.kt)("a",{parentName:"p",href:"http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/"},"practical reasons"),"\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nTerser now has a converter which can import a SpiderMonkey AST."),(0,i.kt)("p",null,"For example ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ternjs/acorn"},"Acorn")," is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use Terser to mangle and\ncompress that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"acorn file.js | terser -p spidermonkey -m -c\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"-p spidermonkey")," option tells Terser that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"spidermonkey")," is also available in ",(0,i.kt)("inlineCode",{parentName:"p"},"minify")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"format")," options to\naccept and/or produce a spidermonkey AST."),(0,i.kt)("h3",{id:"use-acorn-for-parsing"},"Use Acorn for parsing"),(0,i.kt)("p",null,"More for fun, I added the ",(0,i.kt)("inlineCode",{parentName:"p"},"-p acorn")," option which will use Acorn to do all\nthe parsing.  If you pass this option, Terser will ",(0,i.kt)("inlineCode",{parentName:"p"},'require("acorn")'),"."),(0,i.kt)("p",null,"Acorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using Terser's own parser."),(0,i.kt)("h3",{id:"terser-fast-minify-mode"},"Terser Fast Minify Mode"),(0,i.kt)("p",null,"It's not well known, but whitespace removal and symbol mangling accounts\nfor 95% of the size reduction in minified code for most JavaScript - not\nelaborate code transforms. One can simply disable ",(0,i.kt)("inlineCode",{parentName:"p"},"compress")," to speed up\nTerser builds by 3 to 4 times."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"d3.js"),(0,i.kt)("th",{parentName:"tr",align:"right"},"size"),(0,i.kt)("th",{parentName:"tr",align:"right"},"gzip size"),(0,i.kt)("th",{parentName:"tr",align:"right"},"time (s)"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"original"),(0,i.kt)("td",{parentName:"tr",align:"right"},"451,131"),(0,i.kt)("td",{parentName:"tr",align:"right"},"108,733"),(0,i.kt)("td",{parentName:"tr",align:"right"},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:terser@3.7.5"},"terser@3.7.5")," mangle=false, compress=false"),(0,i.kt)("td",{parentName:"tr",align:"right"},"316,600"),(0,i.kt)("td",{parentName:"tr",align:"right"},"85,245"),(0,i.kt)("td",{parentName:"tr",align:"right"},"0.82")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:terser@3.7.5"},"terser@3.7.5")," mangle=true, compress=false"),(0,i.kt)("td",{parentName:"tr",align:"right"},"220,216"),(0,i.kt)("td",{parentName:"tr",align:"right"},"72,730"),(0,i.kt)("td",{parentName:"tr",align:"right"},"1.45")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:terser@3.7.5"},"terser@3.7.5")," mangle=true, compress=true"),(0,i.kt)("td",{parentName:"tr",align:"right"},"212,046"),(0,i.kt)("td",{parentName:"tr",align:"right"},"70,954"),(0,i.kt)("td",{parentName:"tr",align:"right"},"5.87")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:babili@0.1.4"},"babili@0.1.4")),(0,i.kt)("td",{parentName:"tr",align:"right"},"210,713"),(0,i.kt)("td",{parentName:"tr",align:"right"},"72,140"),(0,i.kt)("td",{parentName:"tr",align:"right"},"12.64")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:babel-minify@0.4.3"},"babel-minify@0.4.3")),(0,i.kt)("td",{parentName:"tr",align:"right"},"210,321"),(0,i.kt)("td",{parentName:"tr",align:"right"},"72,242"),(0,i.kt)("td",{parentName:"tr",align:"right"},"48.67")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"mailto:babel-minify@0.5.0-alpha.01eac1c3"},"babel-minify@0.5.0-alpha.01eac1c3")),(0,i.kt)("td",{parentName:"tr",align:"right"},"210,421"),(0,i.kt)("td",{parentName:"tr",align:"right"},"72,238"),(0,i.kt)("td",{parentName:"tr",align:"right"},"14.17")))),(0,i.kt)("p",null,"To enable fast minify mode from the CLI use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"terser file.js -m\n")),(0,i.kt)("p",null,"To enable fast minify mode with the API use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"await minify(code, { compress: false, mangle: true });\n")),(0,i.kt)("h4",{id:"source-maps-and-debugging"},"Source maps and debugging"),(0,i.kt)("p",null,"Various ",(0,i.kt)("inlineCode",{parentName:"p"},"compress")," transforms that simplify, rearrange, inline and remove code\nare known to have an adverse effect on debugging with source maps. This is\nexpected as code is optimized and mappings are often simply not possible as\nsome code no longer exists. For highest fidelity in source map debugging\ndisable the ",(0,i.kt)("inlineCode",{parentName:"p"},"compress")," option and just use ",(0,i.kt)("inlineCode",{parentName:"p"},"mangle"),"."),(0,i.kt)("p",null,"When debugging, make sure you enable the ",(0,i.kt)("strong",{parentName:"p"},'"map scopes"')," feature to map mangled variable names back to their original names.",(0,i.kt)("br",{parentName:"p"}),"\n","Without this, all variable values will be ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),". See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/terser/terser/issues/1367"},"https://github.com/terser/terser/issues/1367")," for more details."),(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/27283110/230441652-ac5cf6b0-5dc5-4ffc-9d8b-bd02875484f4.png",alt:"image"})),(0,i.kt)("h3",{id:"compiler-assumptions"},"Compiler assumptions"),(0,i.kt)("p",null,"To allow for better optimizations, the compiler makes various assumptions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".toString()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},".valueOf()")," don't have side effects, and for built-in\nobjects they have not been overridden."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Infinity")," have not been externally redefined."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arguments.callee"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"arguments.caller")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Function.prototype.caller")," are not used."),(0,i.kt)("li",{parentName:"ul"},"The code doesn't expect the contents of ",(0,i.kt)("inlineCode",{parentName:"li"},"Function.prototype.toString()")," or\n",(0,i.kt)("inlineCode",{parentName:"li"},"Error.prototype.stack")," to be anything in particular."),(0,i.kt)("li",{parentName:"ul"},"Getting and setting properties on a plain object does not cause other side effects\n(using ",(0,i.kt)("inlineCode",{parentName:"li"},".watch()")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Proxy"),")."),(0,i.kt)("li",{parentName:"ul"},"Object properties can be added, removed and modified (not prevented with\n",(0,i.kt)("inlineCode",{parentName:"li"},"Object.defineProperty()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Object.defineProperties()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Object.freeze()"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"Object.preventExtensions()")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Object.seal()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"document.all")," is not ",(0,i.kt)("inlineCode",{parentName:"li"},"== null")),(0,i.kt)("li",{parentName:"ul"},"Assigning properties to a class doesn't have side effects and does not throw.")),(0,i.kt)("h3",{id:"build-tools-and-adaptors-using-terser"},"Build Tools and Adaptors using Terser"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/browse/depended/terser"},"https://www.npmjs.com/browse/depended/terser")),(0,i.kt)("h3",{id:"replacing-uglify-es-with-terser-in-a-project-using-yarn"},"Replacing ",(0,i.kt)("inlineCode",{parentName:"h3"},"uglify-es")," with ",(0,i.kt)("inlineCode",{parentName:"h3"},"terser")," in a project using ",(0,i.kt)("inlineCode",{parentName:"h3"},"yarn")),(0,i.kt)("p",null,"A number of JS bundlers and uglify wrappers are still using buggy versions\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"uglify-es")," and have not yet upgraded to ",(0,i.kt)("inlineCode",{parentName:"p"},"terser"),". If you are using ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn"),"\nyou can add the following alias to your project's ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'  "resolutions": {\n    "uglify-es": "npm:terser"\n  }\n')),(0,i.kt)("p",null,"to use ",(0,i.kt)("inlineCode",{parentName:"p"},"terser")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"uglify-es")," in all deeply nested dependencies\nwithout changing any code."),(0,i.kt)("p",null,"Note: for this change to take effect you must run the following commands\nto remove the existing ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn")," lock file and reinstall all packages:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ rm -rf node_modules yarn.lock\n$ yarn\n")))}u.isMDXComponent=!0}}]);