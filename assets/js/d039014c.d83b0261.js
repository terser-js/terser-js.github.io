"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[111],{3817:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=s(5893),t=s(1151);const r={id:"miscellaneous",title:"Miscellaneous",sidebar_label:"Miscellaneous"},o=void 0,l={id:"miscellaneous",title:"Miscellaneous",description:"Keeping copyright notices or other comments",source:"@site/docs/miscellaneous.md",sourceDirName:".",slug:"/miscellaneous",permalink:"/docs/miscellaneous",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"miscellaneous",title:"Miscellaneous",sidebar_label:"Miscellaneous"},sidebar:"tutorialSidebar",previous:{title:"CLI Usage",permalink:"/docs/cli-usage"},next:{title:"Options",permalink:"/docs/options"}},c={},d=[{value:"Keeping copyright notices or other comments",id:"keeping-copyright-notices-or-other-comments",level:3},{value:"The <code>unsafe</code> <code>compress</code> option",id:"the-unsafe-compress-option",level:3},{value:"Conditional compilation",id:"conditional-compilation",level:3},{value:"Conditional compilation API",id:"conditional-compilation-api",level:3},{value:"Annotations",id:"annotations",level:3},{value:"ESTree / SpiderMonkey AST",id:"estree--spidermonkey-ast",level:3},{value:"Use Acorn for parsing",id:"use-acorn-for-parsing",level:3},{value:"Terser Fast Minify Mode",id:"terser-fast-minify-mode",level:3},{value:"Source maps and debugging",id:"source-maps-and-debugging",level:4},{value:"Compiler assumptions",id:"compiler-assumptions",level:3},{value:"Build Tools and Adaptors using Terser",id:"build-tools-and-adaptors-using-terser",level:3},{value:"Replacing <code>uglify-es</code> with <code>terser</code> in a project using <code>yarn</code>",id:"replacing-uglify-es-with-terser-in-a-project-using-yarn",level:3}];function a(e){const n={a:"a",br:"br",code:"code",em:"em",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"keeping-copyright-notices-or-other-comments",children:"Keeping copyright notices or other comments"}),"\n",(0,i.jsxs)(n.p,{children:["You can pass ",(0,i.jsx)(n.code,{children:"--comments"}),' to retain certain comments in the output.  By\ndefault it will keep comments starting with "!" and JSDoc-style comments that\ncontain "@preserve", "@copyright", "@license" or "@cc_on" (conditional compilation for IE).\nYou can pass ',(0,i.jsx)(n.code,{children:"--comments all"})," to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example ",(0,i.jsx)(n.code,{children:"--comments /^!/"}),"\nwill keep comments like ",(0,i.jsx)(n.code,{children:"/*! Copyright Notice */"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Note, however, that there might be situations where comments are lost.  For\nexample:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function f() {\n    /** @preserve Foo Bar */\n    function g() {\n        // this function is never called\n    }\n    return something();\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:['Even though it has "@preserve", the comment will be lost because the inner\nfunction ',(0,i.jsx)(n.code,{children:"g"})," (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced."]}),"\n",(0,i.jsx)(n.p,{children:"The safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes."}),"\n",(0,i.jsxs)(n.h3,{id:"the-unsafe-compress-option",children:["The ",(0,i.jsx)(n.code,{children:"unsafe"})," ",(0,i.jsx)(n.code,{children:"compress"})," option"]}),"\n",(0,i.jsxs)(n.p,{children:["It enables some transformations that ",(0,i.jsx)(n.em,{children:"might"})," break code logic in certain\ncontrived cases, but should be fine for most code.  It assumes that standard\nbuilt-in ECMAScript functions and classes have not been altered or replaced.\nYou might want to try it on your own code; it should reduce the minified size.\nSome examples of the optimizations made when this option is enabled:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"new Array(1, 2, 3)"})," or ",(0,i.jsx)(n.code,{children:"Array(1, 2, 3)"})," \u2192 ",(0,i.jsx)(n.code,{children:"[ 1, 2, 3 ]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Array.from([1, 2, 3])"})," \u2192 ",(0,i.jsx)(n.code,{children:"[1, 2, 3]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"new Object()"})," \u2192 ",(0,i.jsx)(n.code,{children:"{}"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"String(exp)"})," or ",(0,i.jsx)(n.code,{children:"exp.toString()"})," \u2192 ",(0,i.jsx)(n.code,{children:'"" + exp'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"new Object/RegExp/Function/Error/Array (...)"})," \u2192 we discard the ",(0,i.jsx)(n.code,{children:"new"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"foo bar".substr(4)'})," \u2192 ",(0,i.jsx)(n.code,{children:'"bar"'})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"conditional-compilation",children:"Conditional compilation"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"--define"})," (",(0,i.jsx)(n.code,{children:"-d"}),") switch in order to declare global\nvariables that Terser will assume to be constants (unless defined in\nscope).  For example if you pass ",(0,i.jsx)(n.code,{children:"--define DEBUG=false"})," then, coupled with\ndead code removal Terser will discard the following from the output:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'if (DEBUG) {\n    console.log("debug stuff");\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can specify nested constants in the form of ",(0,i.jsx)(n.code,{children:"--define env.DEBUG=false"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Another way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n",(0,i.jsx)(n.code,{children:"build/defines.js"})," file with the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"var DEBUG = false;\nvar PRODUCTION = true;\n// etc.\n"})}),"\n",(0,i.jsx)(n.p,{children:"and build your code like this:"}),"\n",(0,i.jsx)(n.p,{children:"terser build/defines.js js/foo.js js/bar.js... -c"}),"\n",(0,i.jsxs)(n.p,{children:["Terser will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The build will contain the ",(0,i.jsx)(n.code,{children:"const"})," declarations if you use\nthem. If you are targeting < ES6 environments which does not support ",(0,i.jsx)(n.code,{children:"const"}),",\nusing ",(0,i.jsx)(n.code,{children:"var"})," with ",(0,i.jsx)(n.code,{children:"reduce_vars"})," (enabled by default) should suffice."]}),"\n",(0,i.jsx)(n.h3,{id:"conditional-compilation-api",children:"Conditional compilation API"}),"\n",(0,i.jsxs)(n.p,{children:["You can also use conditional compilation via the programmatic API. With the difference that the\nproperty name is ",(0,i.jsx)(n.code,{children:"global_defs"})," and is a compressor property:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'var result = await minify(fs.readFileSync("input.js", "utf8"), {\n    compress: {\n        dead_code: true,\n        global_defs: {\n            DEBUG: false\n        }\n    }\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:["To replace an identifier with an arbitrary non-constant expression it is\nnecessary to prefix the ",(0,i.jsx)(n.code,{children:"global_defs"})," key with ",(0,i.jsx)(n.code,{children:'"@"'})," to instruct Terser\nto parse the value as an expression:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'await minify("alert(\'hello\');", {\n    compress: {\n        global_defs: {\n            "@alert": "console.log"\n        }\n    }\n}).code;\n// returns: \'console.log("hello");\'\n'})}),"\n",(0,i.jsx)(n.p,{children:"Otherwise it would be replaced as string literal:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'await minify("alert(\'hello\');", {\n    compress: {\n        global_defs: {\n            "alert": "console.log"\n        }\n    }\n}).code;\n// returns: \'"console.log"("hello");\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"annotations",children:"Annotations"}),"\n",(0,i.jsx)(n.p,{children:"Annotations in Terser are a way to tell it to treat a certain function call differently. The following annotations are available:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/*@__INLINE__*/"})," - forces a function to be inlined somewhere."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/*@__NOINLINE__*/"})," - Makes sure the called function is not inlined into the call site."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/*@__PURE__*/"})," - Marks a function call as pure. That means, it can safely be dropped."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/*@__KEY__*/"})," - Marks a string literal as a property to also mangle it when mangling properties."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/*@__MANGLE_PROP__*/"})," - Opts-in an object property (or class field) for mangling, when the property mangler is enabled."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can use either a ",(0,i.jsx)(n.code,{children:"@"})," sign at the start, or a ",(0,i.jsx)(n.code,{children:"#"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Here are some examples on how to use them:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'/*@__INLINE__*/\nfunction_always_inlined_here()\n\n/*#__NOINLINE__*/\nfunction_cant_be_inlined_into_here()\n\nconst x = /*#__PURE__*/i_am_dropped_if_x_is_not_used()\n\nfunction lookup(object, key) { return object[key]; }\nlookup({ i_will_be_mangled_too: "bar" }, /*@__KEY__*/ "i_will_be_mangled_too");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"estree--spidermonkey-ast",children:"ESTree / SpiderMonkey AST"}),"\n",(0,i.jsxs)(n.p,{children:["Terser has its own abstract syntax tree format; for\n",(0,i.jsx)(n.a,{href:"http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/",children:"practical reasons"}),"\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nTerser now has a converter which can import a SpiderMonkey AST."]}),"\n",(0,i.jsxs)(n.p,{children:["For example ",(0,i.jsx)(n.a,{href:"https://github.com/acornjs/acorn",children:"Acorn"})," is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use Terser to mangle and\ncompress that:"]}),"\n",(0,i.jsx)(n.p,{children:"acorn file.js | terser -p spidermonkey -m -c"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"-p spidermonkey"})," option tells Terser that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"spidermonkey"})," is also available in ",(0,i.jsx)(n.code,{children:"minify"})," as ",(0,i.jsx)(n.code,{children:"parse"})," and ",(0,i.jsx)(n.code,{children:"format"})," options to\naccept and/or produce a spidermonkey AST."]}),"\n",(0,i.jsx)(n.h3,{id:"use-acorn-for-parsing",children:"Use Acorn for parsing"}),"\n",(0,i.jsxs)(n.p,{children:["More for fun, I added the ",(0,i.jsx)(n.code,{children:"-p acorn"})," option which will use Acorn to do all\nthe parsing.  If you pass this option, Terser will ",(0,i.jsx)(n.code,{children:'require("acorn")'}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Acorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using Terser's own parser."}),"\n",(0,i.jsx)(n.h3,{id:"terser-fast-minify-mode",children:"Terser Fast Minify Mode"}),"\n",(0,i.jsxs)(n.p,{children:["It's not well known, but whitespace removal and symbol mangling accounts\nfor 95% of the size reduction in minified code for most JavaScript - not\nelaborate code transforms. One can simply disable ",(0,i.jsx)(n.code,{children:"compress"})," to speed up\nTerser builds by 3 to 4 times."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"d3.js"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"size"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"gzip size"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"time (s)"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"original"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"451,131"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"108,733"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"-"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"terser@3.7.5 mangle=false, compress=false"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"316,600"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"85,245"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.82"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"terser@3.7.5 mangle=true, compress=false"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"220,216"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"72,730"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1.45"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"terser@3.7.5 mangle=true, compress=true"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"212,046"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"70,954"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"5.87"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"babili@0.1.4"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"210,713"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"72,140"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"12.64"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"babel-minify@0.4.3"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"210,321"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"72,242"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"48.67"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"babel-minify@0.5.0-alpha.01eac1c3"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"210,421"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"72,238"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"14.17"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"To enable fast minify mode from the CLI use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"terser file.js -m\n"})}),"\n",(0,i.jsx)(n.p,{children:"To enable fast minify mode with the API use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await minify(code, { compress: false, mangle: true });\n"})}),"\n",(0,i.jsx)(n.h4,{id:"source-maps-and-debugging",children:"Source maps and debugging"}),"\n",(0,i.jsxs)(n.p,{children:["Various ",(0,i.jsx)(n.code,{children:"compress"})," transforms that simplify, rearrange, inline and remove code\nare known to have an adverse effect on debugging with source maps. This is\nexpected as code is optimized and mappings are often simply not possible as\nsome code no longer exists. For highest fidelity in source map debugging\ndisable the ",(0,i.jsx)(n.code,{children:"compress"})," option and just use ",(0,i.jsx)(n.code,{children:"mangle"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["When debugging, make sure you enable the ",(0,i.jsx)(n.strong,{children:'"map scopes"'})," feature to map mangled variable names back to their original names.",(0,i.jsx)(n.br,{}),"\n","Without this, all variable values will be ",(0,i.jsx)(n.code,{children:"undefined"}),". See ",(0,i.jsx)(n.a,{href:"https://github.com/terser/terser/issues/1367",children:"https://github.com/terser/terser/issues/1367"})," for more details."]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-images.githubusercontent.com/27283110/230441652-ac5cf6b0-5dc5-4ffc-9d8b-bd02875484f4.png",alt:"image"})}),"\n",(0,i.jsx)(n.h3,{id:"compiler-assumptions",children:"Compiler assumptions"}),"\n",(0,i.jsx)(n.p,{children:"To allow for better optimizations, the compiler makes various assumptions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".toString()"})," and ",(0,i.jsx)(n.code,{children:".valueOf()"})," don't have side effects, and for built-in\nobjects they have not been overridden."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"}),", ",(0,i.jsx)(n.code,{children:"NaN"})," and ",(0,i.jsx)(n.code,{children:"Infinity"})," have not been externally redefined."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"arguments.callee"}),", ",(0,i.jsx)(n.code,{children:"arguments.caller"})," and ",(0,i.jsx)(n.code,{children:"Function.prototype.caller"})," are not used."]}),"\n",(0,i.jsxs)(n.li,{children:["The code doesn't expect the contents of ",(0,i.jsx)(n.code,{children:"Function.prototype.toString()"})," or\n",(0,i.jsx)(n.code,{children:"Error.prototype.stack"})," to be anything in particular."]}),"\n",(0,i.jsxs)(n.li,{children:["Getting and setting properties on a plain object does not cause other side effects\n(using ",(0,i.jsx)(n.code,{children:".watch()"})," or ",(0,i.jsx)(n.code,{children:"Proxy"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Object properties can be added, removed and modified (not prevented with\n",(0,i.jsx)(n.code,{children:"Object.defineProperty()"}),", ",(0,i.jsx)(n.code,{children:"Object.defineProperties()"}),", ",(0,i.jsx)(n.code,{children:"Object.freeze()"}),",\n",(0,i.jsx)(n.code,{children:"Object.preventExtensions()"})," or ",(0,i.jsx)(n.code,{children:"Object.seal()"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"document.all"})," is not ",(0,i.jsx)(n.code,{children:"== null"})]}),"\n",(0,i.jsx)(n.li,{children:"Assigning properties to a class doesn't have side effects and does not throw."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"build-tools-and-adaptors-using-terser",children:"Build Tools and Adaptors using Terser"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.npmjs.com/browse/depended/terser",children:"https://www.npmjs.com/browse/depended/terser"})}),"\n",(0,i.jsxs)(n.h3,{id:"replacing-uglify-es-with-terser-in-a-project-using-yarn",children:["Replacing ",(0,i.jsx)(n.code,{children:"uglify-es"})," with ",(0,i.jsx)(n.code,{children:"terser"})," in a project using ",(0,i.jsx)(n.code,{children:"yarn"})]}),"\n",(0,i.jsxs)(n.p,{children:["A number of JS bundlers and uglify wrappers are still using buggy versions\nof ",(0,i.jsx)(n.code,{children:"uglify-es"})," and have not yet upgraded to ",(0,i.jsx)(n.code,{children:"terser"}),". If you are using ",(0,i.jsx)(n.code,{children:"yarn"}),"\nyou can add the following alias to your project's ",(0,i.jsx)(n.code,{children:"package.json"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'  "resolutions": {\n    "uglify-es": "npm:terser"\n  }\n'})}),"\n",(0,i.jsxs)(n.p,{children:["to use ",(0,i.jsx)(n.code,{children:"terser"})," instead of ",(0,i.jsx)(n.code,{children:"uglify-es"})," in all deeply nested dependencies\nwithout changing any code."]}),"\n",(0,i.jsxs)(n.p,{children:["Note: for this change to take effect you must run the following commands\nto remove the existing ",(0,i.jsx)(n.code,{children:"yarn"})," lock file and reinstall all packages:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ rm -rf node_modules yarn.lock\n$ yarn\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>o});var i=s(7294);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);